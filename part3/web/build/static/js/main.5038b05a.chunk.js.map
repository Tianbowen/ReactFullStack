{"version":3,"sources":["components/Note.js","services/note.js","App.js","index.js"],"names":["Note","note","toggerImportance","label","important","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","useState","notes","setNotes","newNote","setNewNode","showAll","setShowAll","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","map","i","key","find","changeNote","returnedNote","catch","error","alert","n","toggerImportanceOf","onSubmit","event","preventDefault","newNoteObj","Date","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gPAOeA,EALF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAKC,EAAuB,EAAvBA,iBACbC,EAAMF,EAAKG,UAAU,qBAAqB,iBAChD,OAAO,4BAAKH,EAAKI,QAAV,KAAoB,4BAAQC,QAASJ,GAAmBC,KCF3DI,EAAU,kCA4BD,EA1BA,WACb,IAAMC,EAAUC,IAAMC,IAAIH,GAEpBI,EAAc,CAClBC,GAAI,IACJP,QAAS,mCACTQ,KAAM,2BACNT,WAAW,GAEb,OAAOI,EAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAON,OAiB1C,EAdA,SAACO,GAEd,OADgBT,IAAMU,KAAKZ,EAASW,GACrBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAY9B,EATA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,GAC/BJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SC4R9BK,EAzFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAoBhBC,qBANa,WACXC,QAAQC,IAAI,UACZC,IAAqBlB,MAAK,SAACmB,GACzBT,EAASS,QAGG,IAChBH,QAAQC,IAAI,SAAUR,EAAMW,OAAQ,SAEpC,IAAMC,EAAcR,EAAUJ,EAAQA,EAAMa,QAAO,SAACnC,GAAD,OAAUA,EAAKG,aAqClE,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMsB,GAAYD,KAChCA,EAAU,MAAQ,QAGvB,6BACE,4BACGQ,EAAYE,KAAI,SAACpC,EAAMqC,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACLrC,KAAMA,EACNC,iBAAkB,kBA7BH,SAACU,GAC1B,IAAMX,EAAOsB,EAAMiB,MAAK,SAACvC,GAAD,OAAUA,EAAKW,KAAOA,KACxC6B,EAAU,2BAAQxC,GAAR,IAAcG,WAAYH,EAAKG,YAE/C4B,EAAmBpB,EAAI6B,GAAY3B,MAAK,SAAC4B,GACvClB,EAASD,EAAMc,KAAI,SAACpC,GAAD,OAAWA,EAAKW,KAAOA,EAAKX,EAAOyC,SAEvDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OAAc5C,EAAKI,QAAnB,sCAELmB,EAASD,EAAMa,QAAO,SAAAU,GAAC,OAAEA,EAAElC,IAAIA,SAmBCmC,CAAmB9C,EAAKW,YAKxD,6BACE,0BAAMoC,SAnDS,SAACC,GACpBA,EAAMC,iBAEN,IAAMC,EAAa,CAEjB9C,QAASoB,EACTZ,KAAM,IAAIuC,KACVhD,UAAWiD,KAAKC,OAAS,IAG3BtB,EAAmBmB,GAAYrC,MAAK,SAAC4B,GACnClB,EAASD,EAAMN,OAAOyB,IACtBhB,EAAW,SAwCP,2BAAO6B,MAAO9B,EAAS+B,SAxDN,SAACP,GACxBvB,EAAWuB,EAAMQ,OAAOF,UAwDlB,4BAAQG,KAAK,UAAb,gBCvGVC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.5038b05a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note,toggerImportance }) => {\r\n  const label=note.important?'make not important':'make important'\r\n  return <li>{note.content}  <button onClick={toggerImportance}>{label}</button></li>;\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:3001/api/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  }\r\n  return request.then((response) => response.data.concat(nonExisting));\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\n/* const test=()=>{\r\n    axios.get('').then().catch()\r\n} */\r\n\r\nexport default { getAll, create, update };\r\n","/* import React, { useState } from \"react\";\r\nimport Note from \"./components/Note\";\r\n\r\nconst App = (props) => {\r\n  const [notes, setNotes] = useState(props.notes);\r\n\r\n  const [newNote, setNewNote] = useState(\"a new note\");\r\n\r\n  const [showAll, setShowAll] = useState(true);\r\n\r\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n\r\n    const noteObject = {\r\n      id: notes.length + 1,\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    };\r\n\r\n    setNotes(notes.concat(noteObject));\r\n    setNewNote(\"\");\r\n    console.log(\"button clicked\", event.target);\r\n  };\r\n\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value);\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          {showAll ? \"importent\" : \"All\"}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note key={note.id} note={note} />\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App; */\r\n\r\n//-------------------Exercises 2.6-2.10-------------\r\n\r\n/* import React, { useState } from \"react\";\r\nimport Phone from \"./components/Phone\";\r\n\r\nconst App = (props) => {\r\n  const [persons, setPersons] = useState(props.phonebooks);\r\n  console.log(persons);\r\n  const [newPerson, setNewPerson] = useState(\"a new person\");\r\n\r\n  const [newNumber, setNewNumber] = useState(\"a new number\");\r\n\r\n  const [searchName, setSearchName] = useState(\"\");\r\n\r\n  const personToShow =\r\n    searchName.length == 0\r\n      ? persons.map(ele=>({id:ele.id,name:ele.name.toLowerCase(),number:ele.number}))\r\n      : persons.map(ele=>({id:ele.id,name:ele.name.toLowerCase(),number:ele.number})).filter((ele) => ele.name.indexOf(searchName) > -1);\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault();\r\n    var index = persons.findIndex((element) => element.name === newPerson);\r\n    if (index == -1) {\r\n      const newObject = {\r\n        id: persons.length + 1,\r\n        name: newPerson,\r\n        number: newNumber,\r\n      };\r\n      setPersons(persons.concat(newObject));\r\n      setNewPerson(\"\");\r\n    } else {\r\n      alert(`${newPerson} is already add in phonebooks`);\r\n    }\r\n\r\n    console.log(event.target);\r\n  };\r\n\r\n  const handlePersonChange = (event) => {\r\n    setNewPerson(event.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value);\r\n  };\r\n\r\n  const handleSearchNameChange = (event) => {\r\n    setSearchName(event.target.value.toLowerCase());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>PhoneBooks</h1>\r\n      <div>\r\n        <input value={searchName} onChange={handleSearchNameChange} />\r\n      </div>\r\n      <ul>\r\n        {personToShow.map((person) => (\r\n          <Phone key={person.id} person={person} />\r\n        ))}\r\n      </ul>\r\n\r\n      <form onSubmit={addPerson}>\r\n        <input value={newPerson} onChange={handlePersonChange} />\r\n        <input vlaue={newNumber} onChange={handleNumberChange} />\r\n        <button type=\"submit\">Add Person</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App; */\r\n\r\n//----------------part2 b form------------------\r\n\r\n/* import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Note from \"./components/Note\";\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNode] = useState(\"\");\r\n  const [showAll, setShowAll] = useState(true);\r\n\r\n  const hook = () => {\r\n    console.log(\"effect\");\r\n    axios.get(\"http://localhost:3001/notes\").then((response) => {\r\n      setNotes(response.data);\r\n    });\r\n  };\r\n  useEffect(hook, []);\r\n  console.log(\"render\", notes.length, \"notes\");\r\n\r\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNode(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newNoteObj = {\r\n      // id: notes.length + 1,\r\n      content: newNote,\r\n      date: new Date(),\r\n      important: Math.random > 0.5,\r\n    };\r\n\r\n    axios.post(\"http://localhost:3001/notes\", newNoteObj).then((response) => {\r\n      console.log(response);\r\n      setNotes(notes.concat(response.data));\r\n      setNewNode(\"\");\r\n    });\r\n  };\r\n\r\n  const toggerImportanceOf = (id) => {\r\n    const url = `http://localhost:3001/notes/${id}`;\r\n    const note = notes.find((note) => note.id === id);\r\n    const changeNote = { ...note, important: !note.important };\r\n\r\n    axios.put(url, changeNote).then((response) => {\r\n      console.log(response);\r\n      setNotes(notes.map((note) => (note.id !== id ? note : response.data)));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          {showAll ? \"imp\" : \"all\"}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          {notesToShow.map((note, i) => (\r\n            <Note\r\n              key={i}\r\n              note={note}\r\n              toggerImportance={() => toggerImportanceOf(note.id)}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <form onSubmit={handleSubmit}>\r\n          <input value={newNote} onChange={handleNoteChange} />\r\n          <button type=\"submit\">Add Note</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App; */\r\n\r\n//----------------part2 c form------------------\r\n import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Note from \"./components/Note\";\r\nimport noteService from \"./services/note\";\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNode] = useState(\"\");\r\n  const [showAll, setShowAll] = useState(true);\r\n\r\n  const name = \"Leevi\";\r\n  const age = 0;\r\n  const person = {\r\n    name: name,\r\n    age: age,\r\n  };\r\n\r\n  const person1 = { name, age };\r\n\r\n  const hook = () => {\r\n    console.log(\"effect\");\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes);\r\n    });\r\n  };\r\n  useEffect(hook, []);\r\n  console.log(\"render\", notes.length, \"notes\");\r\n\r\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNode(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newNoteObj = {\r\n      // id: notes.length + 1,\r\n      content: newNote,\r\n      date: new Date(),\r\n      important: Math.random > 0.5,\r\n    };\r\n\r\n    noteService.create(newNoteObj).then((returnedNote) => {\r\n      setNotes(notes.concat(returnedNote));\r\n      setNewNode(\"\");\r\n    });\r\n  };\r\n\r\n  const toggerImportanceOf = (id) => {\r\n    const note = notes.find((note) => note.id === id);\r\n    const changeNote = { ...note, important: !note.important };\r\n\r\n    noteService.update(id, changeNote).then((returnedNote) => {\r\n      setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\r\n    })\r\n    .catch(error=>{\r\n      alert(`the note '${note.content}' was already deleted from server`)\r\n\r\n      setNotes(notes.filter(n=>n.id!=id));\r\n    })\r\n    ;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          {showAll ? \"imp\" : \"all\"}\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          {notesToShow.map((note, i) => (\r\n            <Note\r\n              key={i}\r\n              note={note}\r\n              toggerImportance={() => toggerImportanceOf(note.id)}\r\n            />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      <div>\r\n        <form onSubmit={handleSubmit}>\r\n          <input value={newNote} onChange={handleNoteChange} />\r\n          <button type=\"submit\">Add Note</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App; \r\n\r\n\r\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n// import App from \"./App\";\n// import Note from \"./components/Note\";\n// import axios from \"axios\";\n\nimport AppPerson from \"./AppPerson\";\n\n/* const notes = [\n  { id: 1, content: \"Html\", date: \"2020-01-01 12:00:00\", important: true },\n  {\n    id: 2,\n    content: \"Javascript\",\n    date: \"2020-01-02 12:00:00\",\n    important: true,\n  },\n  { id: 3, content: \"Css\", date: \"2020-01-03 12:00:00\", important: false },\n]; */\n\n/* const App = (props) => {\n  const { notes } = props;\n\n  const result = notes.map((x) => x.id);\n\n  console.log(result);\n\n  // {notes.map((note) => (\n  //   <li key={note.id}>{note.content}</li>\n  // ))}\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map((note, i) => (\n          <li key={i}>{note.content}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nReactDOM.render(<App notes={notes} />, document.getElementById(\"root\")); */\n\n/* const Note = ({ note }) => {\n  return <li>{note.content}</li>;\n};\n\nconst App1 = ({ notes }) => {\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map(note => \n          <Note key={note.id} note={note} />\n        )}\n      </ul>\n    </div>\n  );\n};\n\nReactDOM.render(\n <App1 notes={notes} />,\n  document.getElementById(\"root\")\n); */\n\n// ReactDOM.render(<App notes={notes} />, document.getElementById(\"root\"));\n\n// Exercises 2.1-2.5\n\n/* const Header = ({ name }) => {\n  return <h1>{name}</h1>;\n};\n\nconst Part = ({ part }) => {\n  return (\n    <li>\n      {part.name} {part.exercises}\n    </li>\n  );\n};\n\nconst Content = ({ parts }) => {\n  return (\n    <ul>\n      {parts.map((part) => (\n        <Part key={part.id} part={part} />\n      ))}\n    </ul>\n  );\n};\n\nconst Total = ({ parts }) => {\n  console.log(parts);\n  return (\n    <h3>\n      total of{\" \"}\n      {parts.reduce((prev, cur) => {\n        return prev + cur.exercises;\n      }, 0)}\n    </h3>\n  );\n};\n\nconst CourseChild = ({ cou }) => {\n  return (\n    <div>\n      <Header name={cou.name} />\n      <Content parts={cou.parts} />\n      <Total parts={cou.parts} />\n    </div>\n  );\n};\n\nconst Course = ({ course }) => {\n  return (\n    <div>\n      {course.map((cou) => (\n        <CourseChild cou={cou} />\n      ))}\n    </div>\n  );\n};\n\nconst App = () => {\n  const course = [\n    {\n      id: 1,\n      name: \"Half Stack application development\",\n      parts: [\n        { name: \"Fundamentals of React\", exercises: 10, id: 1 },\n        { name: \"Using props to pass data\", exercises: 7, id: 2 },\n        { name: \"State of a component\", exercises: 14, id: 3 },\n      ],\n    },\n    {\n      name: \"Node.js\",\n      id: 2,\n      parts: [\n        {\n          name: \"Routing\",\n          exercises: 3,\n          id: 1,\n        },\n        {\n          name: \"Middlewares\",\n          exercises: 7,\n          id: 2,\n        },\n      ],\n    },\n  ];\n\n  return <Course course={course} />;\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n */\n\n//-------------------part2 b form -------\n\n//  const App3=(props)=>{\n\n//    const {notes,setNotes} =useState(props.notes);\n\n//    return (<div>\n//      <h1>Notes</h1>\n//      <ul>\n//        {notes.map(note=><Note key={note.id} note={note} />)}\n//      </ul>\n//    </div>);\n//  }\n\n//  ReactDOM.render(<App notes={notes} />,document.getElementById('root'));\n\n//-------------------Exercises 2.6-2.10-------------\n\n/* const promise = axios.get(\"http://localhost:3001/notes\").then((response) => {\n  const notes = response.data;\n  console.log(notes);\n});\nconsole.log(promise);\n\nconst promise1 = axios.get(\"http://localhost:3001/foobar\");\nconsole.log(promise1);\n\nconst promise2 = axios\n  .get(\"http://localhost:3001/phonebooks\")\n  .then((response) => {\n    const phonebooks = response.data;\n    ReactDOM.render(\n      <App phonebooks={phonebooks} />,\n      document.getElementById(\"root\")\n    );\n  });\n */\n//const phonebooks = [{ id: 1, name: \"Arto Hellas\", number: \"123456\" }];\nimport App from './App'\nReactDOM.render(<App />,document.getElementById('root'));\n\n//-------------------Exercises 2.11.-2.14 ----------------\n\n//ReactDOM.render(<AppPerson />,document.getElementById('root'));\n\n//-------------------Exercises 2.15.-2.18 ----------------\n\n//import AppPhonebook from \"./AppPhonebook\";\n\n//ReactDOM.render(<AppPhonebook />, document.getElementById(\"root\"));\n"],"sourceRoot":""}